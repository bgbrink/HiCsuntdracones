from collections import defaultdict
import pandas as pd


def hicpro2homer(input_bed: str, input_matrix: str, output_matrix: str):
    """Converts HiC interaction matrices generated by HiC-Pro [1] into the
    format used by Homer [2]

    This tool converts (iced) Hi-C matrices generated by HiC-Pro into the format of Homer. 
    While the HiC-Pro matrix reports both directions of an interaction (a -> and b -> a), 
    the Homer format is less redundant as it stores each interaction value of two bins under one ID. 
    The homer format also skips the report of zero value interactions.


    [1] https://github.com/nservant/HiC-Pro
    [2] http://homer.salk.edu/homer/index.html

    """
    binning_information = pd.read_csv(
        input_bed, names=["replicon", "start", "end", "bin_id"], sep="\t")
    pair_value_table = pd.read_csv(
        input_matrix, names=["bin_a", "bin_b", "counting"], sep="\t")
    
    bin_id_to_name = dict([
        (bin_id, "-".join([str(replicon), str(start)]))
        for bin_id, replicon, start in zip(
                binning_information.bin_id,
                binning_information.replicon,
                binning_information.start)])

    bin_pair_to_value = defaultdict(dict)
    for bin_a, bin_b, value in zip(
            pair_value_table["bin_a"], pair_value_table["bin_b"],
            pair_value_table["counting"]):
        bin_pair_to_value[bin_a][bin_b] = value
        bin_pair_to_value[bin_b][bin_a] = value

    result_matrix = pd.DataFrame()
    result_matrix["HiCMatrix"] = binning_information["bin_id"].apply(
        lambda bin_id: bin_id_to_name[bin_id])
    result_matrix["Regions"] = result_matrix["HiCMatrix"]

    # Add column for each bin
    for bin_a in binning_information["bin_id"]:
        result_matrix[bin_id_to_name[bin_a]] = binning_information[
            "bin_id"].apply(
            lambda bin_b: bin_pair_to_value[bin_a].get(bin_b, 0))

    result_matrix.to_csv(output_matrix, sep="\t", index=False)
