#!/usr/bin/env python3
# PYTHON_ARGCOMPLETE_OK
"""HiC sunt dracones - Your little helper for the HiC analysis"""
import argparse
import argcomplete
import hicsuntdracones.hicpro2homer
import hicsuntdracones.hicmatrix
import hicsuntdracones.colocalization
import hicsuntdracones.diffcolocalization
import hicsuntdracones.distdepdecay
import hicsuntdracones.virtual4c
import hicsuntdracones.ploidy

__author__ = ("Konrad Förstner <konrad@foerstner.org> "
              "Laura Müller-Hübner "
              "<Laura.Mueller-Huebner@para.vetmed.uni-muenchen.de> "
              "Muhammad Elhossary <elhossary@zbmed.de> ")
__copyright__ = "2018 by Konrad Förstner <konrad@foerstner.org>"
__license__ = "ISC license"
__email__ = "konrad@foerstner.org"
__version__ = "0.1.2b1"
__maintainer__ = "Konrad Förstner"


def main():
    """
    The entry point.
    """
    parser = argparse.ArgumentParser()
    subparsers = parser.add_subparsers(help="commands")
    # _-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-
    show_version_parser = subparsers.add_parser(
        "version", help="Show version")
    show_version_parser.set_defaults(func=show_version)
    # _-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-
    hicpro2homer_parser = subparsers.add_parser(
        "hicpro2homer", help="Convert a matrix in HiC-Pro format to "
        "Homer format")
    hicpro2homer_parser.set_defaults(func=hicpro2homer)
    hicpro2homer_parser.add_argument("--input_bed", "-b", required=True,
                                     help="")
    hicpro2homer_parser.add_argument("--input_matrix", "-m", required=True,
                                     help="Input matrix file.")
    hicpro2homer_parser.add_argument("--output_matrix", "-o", required=True,
                                     help="")
    # _-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-
    number_of_bins_parser = subparsers.add_parser(
        "number_of_bins", help="Return the number of bins of the matrix")
    number_of_bins_parser.set_defaults(func=number_of_bins)
    number_of_bins_parser.add_argument("--input_matrix", "-m", required=True,
                                       help="Input matrix file.")
    # _-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-
    chromosomes_parser = subparsers.add_parser(
        "chromosomes", help="Return the chromosomes used in the matrix")
    chromosomes_parser.set_defaults(func=chromosomes)
    chromosomes_parser.add_argument("--input_matrix", "-m", required=True,
                                    help="Input matrix file.")
    # _-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-
    normalize_by_columns_sum_parser = subparsers.add_parser(
        "norm_by_col_sum",
        help="Normalize by column sum to make matrices comparable")
    normalize_by_columns_sum_parser.set_defaults(func=normalize_by_columns_sum)
    normalize_by_columns_sum_parser.add_argument("--input_matrix", "-m", required=True,
                                                 help="Input matrix file.")
    normalize_by_columns_sum_parser.add_argument("--output_matrix", "-o", required=True,
                                                 help="")
    # _-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-
    submatrix_parser = subparsers.add_parser(
        "submatrix", help="Extract submatrices")
    submatrix_parser.set_defaults(func=submatrix)
    submatrix_parser.add_argument("--input_matrix", "-m", required=True,
                                  help="Input matrix file.")
    submatrix_parser.add_argument("--output_matrix", "-o", required=True,
                                  help="")
    submatrix_parser.add_argument(
        "--keep_pattern", "-k",
        help="Bins matching this pattern are explicitly kept."
        "Removing is stronger than keeping.")
    submatrix_parser.add_argument(
        "--remove_pattern", "-r",
        help="Are explicitly removed. Removing is stronger than keeping")
    submatrix_parser.add_argument(
        "--regex", "-x", action="store_true",
        help="Enables RegEx mode, see python RegEx grammar.")
    # _-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-
    diff_matrix_parser = subparsers.add_parser(
        "diff_matrix", help="Generate differential matrix by dividing the "
        "values of one matrix by the values of the other.")
    diff_matrix_parser.set_defaults(func=diff_matrix)
    diff_matrix_parser.add_argument("--numerator_matrix", "-n", required=True,
                                    help="")
    diff_matrix_parser.add_argument("--denominator_matrix", "-d", required=True,
                                    help="")
    diff_matrix_parser.add_argument("--pseudocount", "-p", default=0.001,
                                    help="Default 0.001")
    diff_matrix_parser.add_argument(
        "--norm_by_col_sum", "-c", default=False, action="store_true",
        help="Normalize the matrices by column sum before performing "
        "the division.")
    diff_matrix_parser.add_argument("--output_matrix", "-o", required=True,
                                    help="")
    # _-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-
    heatmap_parser = subparsers.add_parser(
        "heatmap", help="Plot interaction matix heatmap")
    heatmap_parser.set_defaults(func=matrix_heatmap)
    heatmap_parser.add_argument(
        "--matrix", "-m", dest="matrix_file", required=True, help="Input matrix file.")
    heatmap_parser.add_argument(
        "--vmin", "-mn", type=float, default=None,
        help="")
    heatmap_parser.add_argument(
        "--vmax", "-mx", type=float, default=None,
        help="")
    heatmap_parser.add_argument(
        "--rotate", "-r", default=False, action="store_true",
        help="Rotate 45 degrees. Pyramids FTW!")
    heatmap_parser.add_argument(
        "--by_chrom", "-c", default=False, action="store_true", help="")
    heatmap_parser.add_argument(
        "--output_prefix", "-o", required=True,
        help="Name the prefix for all output chosen formats")
    heatmap_parser.add_argument(
        "--output_pdf", "-p", default=False, action="store_true",
        help="All figures will be written into this single file")
    heatmap_parser.add_argument(
        "--output_png", "-n", default=False, action="store_true",
        help="Each figure file will be stored in a separate PNG file.")
    heatmap_parser.add_argument(
        "--png_dpi", "-e", type=int, help="Specify pixel density for the PNG image.")
    heatmap_parser.add_argument(
        "--differential", "-d", default=False, action="store_true", help="")
    heatmap_parser.add_argument(
        "--interactive_plot", "-i", default=False, action="store_true",
        help="Use interactive heatmap plotting, output will be an HTMl file")
    # _-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-
    histogram_parser = subparsers.add_parser("histogram", help="Plot histogram for matrix reads")
    histogram_parser.set_defaults(func=matrix_histogram)
    histogram_parser.add_argument(
        "--matrix", "-m", dest="matrix_file", required=True, help="Input matrix file.")
    histogram_parser.add_argument(
        "--output_prefix", "-o", required=True,
        help="Name the prefix for the output.")
    # _-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-
    virtual_4C_parser = subparsers.add_parser(
        "virtual_4C", help="Perform virtual 4C analysis")
    virtual_4C_parser.set_defaults(func=virtual_4C)
    virtual_4C_parser.add_argument("--matrix_file", "-m", required=True,
                                   help="Input matrix file.")
    virtual_4C_parser.add_argument("--gff_file", "-g", required=True,
                                   help="")
    virtual_4C_parser.add_argument("--bin_size", "-b", type=int, required=True,
                                   help="")
    virtual_4C_parser.add_argument("--track_name", "-t", required=True,
                                   help="")
    virtual_4C_parser.add_argument("--output_file", "-o", required=True,
                                   help="")
    # _-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-
    dist_dep_decay_parser = subparsers.add_parser(
        "dist_dep_decay", help="Distant dependent decay")
    dist_dep_decay_parser.set_defaults(func=dist_dep_decay)
    dist_dep_decay_parser.add_argument("--matrix", "-m", dest="matrix_file", required=True,
                                       help="Input matrix file.")
    dist_dep_decay_parser.add_argument(
        "--bin_size", "-b", required=True, type=int, help="")
    dist_dep_decay_parser.add_argument("--output_prefix", "-o", required=True, help="")
    dist_dep_decay_parser.add_argument(
        "--norm_by_col_sum", "-c", default=False, action="store_true",
        help="Normalize the matrices by column sum before performing "
        "the division.")
    # _-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-
    colocalisation_parser = subparsers.add_parser(
         "colo", help="Perform colocalisation analysis")
    colocalisation_parser.set_defaults(func=colocalisation)
    colocalisation_parser.add_argument("--matrix", "-m", dest="matrix_file", required=True,
                                       help="Input matrix file.")
    colocalisation_parser.add_argument("--gff", "-g", dest="gff_file", required=True,
                                       help="")
    colocalisation_parser.add_argument("--feature", "-f", required=True,
                                       help="")
    colocalisation_parser.add_argument("--bin_size", "-b", required=True, type=int,
                                       help="")
    colocalisation_parser.add_argument(
        "--number_of_subsamplings", "-s", default=1, type=int, help="Default 1")
    colocalisation_parser.add_argument("--output_prefix", "-o", required=True)
    colocalisation_parser.add_argument(
        "--margin", "-r", default=0, type=int, help="Default 0")
    colocalisation_parser.add_argument(
        "--flanks_only", "-l", default=False, action="store_true",
        help="")
    colocalisation_parser.add_argument(
        "--remove_zeros", "-z", default=False, action="store_true",
        help="")
    # _-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-
    diff_colocalisation_parser = subparsers.add_parser(
         "colo_diff", help="Perform differential colocalisation analysis")
    diff_colocalisation_parser.set_defaults(func=diff_colocalisation)
    diff_colocalisation_parser.add_argument(
        "--matrix_1", "-1", dest="matrix_file_1", required=True,
        help="First input matrix file.")
    diff_colocalisation_parser.add_argument(
        "--matrix_2", "-2", dest="matrix_file_2", required=True,
        help="Second input matrix file.")
    diff_colocalisation_parser.add_argument("--gff", "-g", dest="gff_file", required=True,
                                            help="")
    diff_colocalisation_parser.add_argument("--feature", "-f", required=True,
                                            help="")
    diff_colocalisation_parser.add_argument("--bin_size", "-b", required=True, type=int,
                                            help="")
    diff_colocalisation_parser.add_argument("--number_of_subsamplings", "-s",
                                             default=1, type=int, help="Default 1")
    diff_colocalisation_parser.add_argument("--output_prefix", "-o", required=True,
                                            help="")
    diff_colocalisation_parser.add_argument(
        "--margin", "-r", default=0, type=int, help="Default 0")
    diff_colocalisation_parser.add_argument(
        "--flanks_only", "-l", default=False, action="store_true",
        help="")
    diff_colocalisation_parser.add_argument(
        "--remove_zeros", "-z", default=False, action="store_true",
        help="")
    # _-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-
    ploidy_parser = subparsers.add_parser("ploidy", help="Apply ploidy factors")
    ploidy_parser.set_defaults(func="ploidy")
    ploidy_parser.add_argument("--input_hic_pro_matrix_values", "-iv", required=True,
                               help="")
    ploidy_parser.add_argument("--input_hic_pro_matrix_coordinates", "-ic", required=True,
                               help="")
    ploidy_parser.add_argument("--ploidy_file", "-p", required=True,
                               help="")
    ploidy_parser.add_argument("--output_matrix_values", "-ov", required=True,
                               help="")
    ploidy_parser.add_argument("--output_matrix_coordinates", "-oc", required=True,
                               help="")
    ploidy_parser.add_argument("--bin_size", "-b", required=True, type=int,
                               help="")
    # _-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-
    argcomplete.autocomplete(parser)
    args = parser.parse_args()
    if "func" in dir(args):
        args.func(args)
    else:
        parser.print_help()


def show_version(args):
    """
    Version
    """
    print(__version__)


def number_of_bins(args):
    """
    Return the number of bins
    """
    hic_matrix = hicsuntdracones.hicmatrix.read_hic_matrix(args.input_matrix)
    print(hic_matrix.number_of_bins)


def chromosomes(args):
    hic_matrix = hicsuntdracones.hicmatrix.read_hic_matrix(args.input_matrix)
    print("\n".join(hic_matrix.chromosomes))


def hicpro2homer(args):
    """
    Convert a matrix in HiC-Pro format to "Homer format.
    """
    hicsuntdracones.hicpro2homer.hicpro2homer(
        args.input_bed, args.input_matrix, args.output_matrix)


def normalize_by_columns_sum(args):
    hic_matrix = hicsuntdracones.hicmatrix.read_hic_matrix(args.input_matrix)
    hic_matrix.normalize_by_columns_sum()
    hic_matrix.save(args.output_matrix)


def submatrix(args):
    """
    Extract a submatrix
    """
    hic_matrix = hicsuntdracones.hicmatrix.read_hic_matrix(args.input_matrix)
    hic_matrix.select(
        keep_pattern=args.keep_pattern,
        remove_pattern=args.remove_pattern,
        regex_mode=args.regex,
        inplace=True)
    hic_matrix.save(args.output_matrix)


def matrix_heatmap(args):
    """
    Plot matrix heatmap
    """
    hic_matrix = hicsuntdracones.hicmatrix.read_hic_matrix(args.matrix_file)
    hic_matrix.heatmap(
        vmin=args.vmin, vmax=args.vmax, by_chrom=args.by_chrom,
        rotate=args.rotate,  output_prefix=args.output_prefix,
        output_pdf=args.output_pdf,
        output_png=args.output_png, png_dpi=args.png_dpi,
        differential=args.differential, interactive_plot=args.interactive_plot)

def matrix_histogram(args):
    """
        Plot matrix histogram
    """
    hic_matrix = hicsuntdracones.hicmatrix.read_hic_matrix(args.matrix_file)
    hic_matrix.histogram(output_prefix=args.output_prefix)

def diff_matrix(args):
    """
    Generate differential matrix by dividing the values of one matrix
    by the values of the other.
    """
    hic_matrix_numerator = hicsuntdracones.hicmatrix.read_hic_matrix(
        args.numerator_matrix)
    hic_matrix_denominator_matrix = hicsuntdracones.hicmatrix.read_hic_matrix(
        args.denominator_matrix)
    if args.norm_by_col_sum:
        hic_matrix_numerator.normalize_by_columns_sum()
        hic_matrix_denominator_matrix.normalize_by_columns_sum()
    hic_matrix_numerator.div_by(hic_matrix_denominator_matrix, inplace=True)
    hic_matrix_numerator.save(args.output_matrix)


def virtual_4C(args):
    """
    Perform virtual 4C analysis
    """
    virtual_4c = hicsuntdracones.virtual4c.Virtual4C(
        args.matrix_file, args.gff_file, args.bin_size, args.track_name,
        args.output_file)
    virtual_4c.read_gff_file()
    virtual_4c.read_matrix_file_and_add_as_features()
    virtual_4c.extract_features_overlapping_bins()
    virtual_4c.generate_wiggle_file()


def colocalisation(args):
    hicsuntdracones.colocalization.analyse_colocalization(args)


def diff_colocalisation(args):
    hicsuntdracones.diffcolocalization.analyse_diff_colocalization(args)


def dist_dep_decay(args):
    dist_dep_decay_output_generator = (
        hicsuntdracones.distdepdecay.DistDepDecayOutputGenerator(
            args.matrix_file, args.bin_size, args.output_prefix))
    dist_dep_decay_output_generator.write_table_file()
    dist_dep_decay_output_generator.plot_bin_averages()
    dist_dep_decay_output_generator.plot_bin_averages_with_error_bars()
    dist_dep_decay_output_generator.plot_all_values()


def ploidy(args):
    ploidy_obj = hicsuntdracones.ploidy.Ploidy(
        hic_pro_matrix_values=args.input_hic_pro_matrix_values,
        hic_pro_matrix_coordinates=args.input_hic_pro_matrix_coordinates,
        ploidy_file=args.ploidy_file,
        output_matrix_values=args.output_matrix_values,
        output_matrix_coordinates=args.output_matrix_coordinates,
        bin_size=args.bin_size)
    ploidy_obj.main()

main()
